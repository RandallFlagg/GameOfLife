#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace Jones {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class jonesDataTable;
        public : ref class configurationDataTable;
        public : ref class jonesRow;
        public : ref class configurationRow;
        public : ref class jonesRowChangeEvent;
        public : ref class configurationRowChangeEvent;
        
        private: Jones::NewDataSet::jonesDataTable^  tablejones;
        
        private: Jones::NewDataSet::configurationDataTable^  tableconfiguration;
        
        private: ::System::Data::DataRelation^  relationjones_configuration;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void jonesRowChangeEventHandler(::System::Object^  sender, Jones::NewDataSet::jonesRowChangeEvent^  e);
        
        public : delegate System::Void configurationRowChangeEventHandler(::System::Object^  sender, Jones::NewDataSet::configurationRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property Jones::NewDataSet::jonesDataTable^  jones {
            Jones::NewDataSet::jonesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property Jones::NewDataSet::configurationDataTable^  configuration {
            Jones::NewDataSet::configurationDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializejones();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeconfiguration();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class jonesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnjones_Id;
            
            public: event Jones::NewDataSet::jonesRowChangeEventHandler^  jonesRowChanging;
            
            public: event Jones::NewDataSet::jonesRowChangeEventHandler^  jonesRowChanged;
            
            public: event Jones::NewDataSet::jonesRowChangeEventHandler^  jonesRowDeleting;
            
            public: event Jones::NewDataSet::jonesRowChangeEventHandler^  jonesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            jonesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            jonesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            jonesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  jones_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property Jones::NewDataSet::jonesRow^  default [::System::Int32 ] {
                Jones::NewDataSet::jonesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddjonesRow(Jones::NewDataSet::jonesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Jones::NewDataSet::jonesRow^  AddjonesRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Jones::NewDataSet::jonesRow^  NewjonesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovejonesRow(Jones::NewDataSet::jonesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class configurationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnresolution;
            
            private: ::System::Data::DataColumn^  columnmaxNumberOfPlayers;
            
            private: ::System::Data::DataColumn^  columngraphicEngine;
            
            private: ::System::Data::DataColumn^  columnScenario;
            
            private: ::System::Data::DataColumn^  columnjones_Id;
            
            public: event Jones::NewDataSet::configurationRowChangeEventHandler^  configurationRowChanging;
            
            public: event Jones::NewDataSet::configurationRowChangeEventHandler^  configurationRowChanged;
            
            public: event Jones::NewDataSet::configurationRowChangeEventHandler^  configurationRowDeleting;
            
            public: event Jones::NewDataSet::configurationRowChangeEventHandler^  configurationRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            configurationDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            configurationDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            configurationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  resolutionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  maxNumberOfPlayersColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  graphicEngineColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ScenarioColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  jones_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property Jones::NewDataSet::configurationRow^  default [::System::Int32 ] {
                Jones::NewDataSet::configurationRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddconfigurationRow(Jones::NewDataSet::configurationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Jones::NewDataSet::configurationRow^  AddconfigurationRow(System::String^  resolution, System::Int64 maxNumberOfPlayers, 
                        System::String^  graphicEngine, System::Int64 Scenario, Jones::NewDataSet::jonesRow^  parentjonesRowByjones_configuration);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            Jones::NewDataSet::configurationRow^  NewconfigurationRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveconfigurationRow(Jones::NewDataSet::configurationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class jonesRow : public ::System::Data::DataRow {
            
            private: Jones::NewDataSet::jonesDataTable^  tablejones;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            jonesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 jones_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< Jones::NewDataSet::configurationRow^  >^  GetconfigurationRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class configurationRow : public ::System::Data::DataRow {
            
            private: Jones::NewDataSet::configurationDataTable^  tableconfiguration;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            configurationRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  resolution {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 maxNumberOfPlayers {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  graphicEngine {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int64 Scenario {
                System::Int64 get();
                System::Void set(System::Int64 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 jones_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property Jones::NewDataSet::jonesRow^  jonesRow {
                Jones::NewDataSet::jonesRow^  get();
                System::Void set(Jones::NewDataSet::jonesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isjones_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setjones_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class jonesRowChangeEvent : public ::System::EventArgs {
            
            private: Jones::NewDataSet::jonesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            jonesRowChangeEvent(Jones::NewDataSet::jonesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property Jones::NewDataSet::jonesRow^  Row {
                Jones::NewDataSet::jonesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class configurationRowChangeEvent : public ::System::EventArgs {
            
            private: Jones::NewDataSet::configurationRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            configurationRowChangeEvent(Jones::NewDataSet::configurationRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property Jones::NewDataSet::configurationRow^  Row {
                Jones::NewDataSet::configurationRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace Jones {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Jones::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Jones::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"jones"] != nullptr) {
                __super::Tables->Add((gcnew Jones::NewDataSet::jonesDataTable(ds->Tables[L"jones"])));
            }
            if (ds->Tables[L"configuration"] != nullptr) {
                __super::Tables->Add((gcnew Jones::NewDataSet::configurationDataTable(ds->Tables[L"configuration"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &Jones::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline Jones::NewDataSet::jonesDataTable^  NewDataSet::jones::get() {
        return this->tablejones;
    }
    
    inline Jones::NewDataSet::configurationDataTable^  NewDataSet::configuration::get() {
        return this->tableconfiguration;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        Jones::NewDataSet^  cln = (cli::safe_cast<Jones::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"jones"] != nullptr) {
                __super::Tables->Add((gcnew Jones::NewDataSet::jonesDataTable(ds->Tables[L"jones"])));
            }
            if (ds->Tables[L"configuration"] != nullptr) {
                __super::Tables->Add((gcnew Jones::NewDataSet::configurationDataTable(ds->Tables[L"configuration"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tablejones = (cli::safe_cast<Jones::NewDataSet::jonesDataTable^  >(__super::Tables[L"jones"]));
        if (initTable == true) {
            if (this->tablejones != nullptr) {
                this->tablejones->InitVars();
            }
        }
        this->tableconfiguration = (cli::safe_cast<Jones::NewDataSet::configurationDataTable^  >(__super::Tables[L"configuration"]));
        if (initTable == true) {
            if (this->tableconfiguration != nullptr) {
                this->tableconfiguration->InitVars();
            }
        }
        this->relationjones_configuration = this->Relations[L"jones_configuration"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablejones = (gcnew Jones::NewDataSet::jonesDataTable());
        __super::Tables->Add(this->tablejones);
        this->tableconfiguration = (gcnew Jones::NewDataSet::configurationDataTable());
        __super::Tables->Add(this->tableconfiguration);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jones_configuration", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejones->jones_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconfiguration->jones_IdColumn}));
        this->tableconfiguration->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationjones_configuration = (gcnew ::System::Data::DataRelation(L"jones_configuration", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejones->jones_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconfiguration->jones_IdColumn}, false));
        this->relationjones_configuration->Nested = true;
        this->Relations->Add(this->relationjones_configuration);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializejones() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeconfiguration() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        Jones::NewDataSet^  ds = (gcnew Jones::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::jonesDataTable::jonesDataTable() {
        this->TableName = L"jones";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::jonesDataTable::jonesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::jonesDataTable::jonesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::jonesDataTable::jones_IdColumn::get() {
        return this->columnjones_Id;
    }
    
    inline ::System::Int32 NewDataSet::jonesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline Jones::NewDataSet::jonesRow^  NewDataSet::jonesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<Jones::NewDataSet::jonesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::AddjonesRow(Jones::NewDataSet::jonesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline Jones::NewDataSet::jonesRow^  NewDataSet::jonesDataTable::AddjonesRow() {
        Jones::NewDataSet::jonesRow^  rowjonesRow = (cli::safe_cast<Jones::NewDataSet::jonesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowjonesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowjonesRow);
        return rowjonesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::jonesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::jonesDataTable::Clone() {
        Jones::NewDataSet::jonesDataTable^  cln = (cli::safe_cast<Jones::NewDataSet::jonesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::jonesDataTable::CreateInstance() {
        return (gcnew Jones::NewDataSet::jonesDataTable());
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::InitVars() {
        this->columnjones_Id = __super::Columns[L"jones_Id"];
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::InitClass() {
        this->columnjones_Id = (gcnew ::System::Data::DataColumn(L"jones_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnjones_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnjones_Id}, 
                true)));
        this->columnjones_Id->AutoIncrement = true;
        this->columnjones_Id->AllowDBNull = false;
        this->columnjones_Id->Unique = true;
    }
    
    inline Jones::NewDataSet::jonesRow^  NewDataSet::jonesDataTable::NewjonesRow() {
        return (cli::safe_cast<Jones::NewDataSet::jonesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::jonesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew Jones::NewDataSet::jonesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::jonesDataTable::GetRowType() {
        return Jones::NewDataSet::jonesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->jonesRowChanged(this, (gcnew Jones::NewDataSet::jonesRowChangeEvent((cli::safe_cast<Jones::NewDataSet::jonesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->jonesRowChanging(this, (gcnew Jones::NewDataSet::jonesRowChangeEvent((cli::safe_cast<Jones::NewDataSet::jonesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->jonesRowDeleted(this, (gcnew Jones::NewDataSet::jonesRowChangeEvent((cli::safe_cast<Jones::NewDataSet::jonesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->jonesRowDeleting(this, (gcnew Jones::NewDataSet::jonesRowChangeEvent((cli::safe_cast<Jones::NewDataSet::jonesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::jonesDataTable::RemovejonesRow(Jones::NewDataSet::jonesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::jonesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        Jones::NewDataSet^  ds = (gcnew Jones::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"jonesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::configurationDataTable::configurationDataTable() {
        this->TableName = L"configuration";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::configurationDataTable::configurationDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::configurationDataTable::configurationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::configurationDataTable::resolutionColumn::get() {
        return this->columnresolution;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::configurationDataTable::maxNumberOfPlayersColumn::get() {
        return this->columnmaxNumberOfPlayers;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::configurationDataTable::graphicEngineColumn::get() {
        return this->columngraphicEngine;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::configurationDataTable::ScenarioColumn::get() {
        return this->columnScenario;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::configurationDataTable::jones_IdColumn::get() {
        return this->columnjones_Id;
    }
    
    inline ::System::Int32 NewDataSet::configurationDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline Jones::NewDataSet::configurationRow^  NewDataSet::configurationDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<Jones::NewDataSet::configurationRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::AddconfigurationRow(Jones::NewDataSet::configurationRow^  row) {
        this->Rows->Add(row);
    }
    
    inline Jones::NewDataSet::configurationRow^  NewDataSet::configurationDataTable::AddconfigurationRow(System::String^  resolution, 
                System::Int64 maxNumberOfPlayers, System::String^  graphicEngine, System::Int64 Scenario, Jones::NewDataSet::jonesRow^  parentjonesRowByjones_configuration) {
        Jones::NewDataSet::configurationRow^  rowconfigurationRow = (cli::safe_cast<Jones::NewDataSet::configurationRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {resolution, maxNumberOfPlayers, 
            graphicEngine, Scenario, nullptr};
        if (parentjonesRowByjones_configuration != nullptr) {
            columnValuesArray[4] = parentjonesRowByjones_configuration[0];
        }
        rowconfigurationRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowconfigurationRow);
        return rowconfigurationRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::configurationDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::configurationDataTable::Clone() {
        Jones::NewDataSet::configurationDataTable^  cln = (cli::safe_cast<Jones::NewDataSet::configurationDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::configurationDataTable::CreateInstance() {
        return (gcnew Jones::NewDataSet::configurationDataTable());
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::InitVars() {
        this->columnresolution = __super::Columns[L"resolution"];
        this->columnmaxNumberOfPlayers = __super::Columns[L"maxNumberOfPlayers"];
        this->columngraphicEngine = __super::Columns[L"graphicEngine"];
        this->columnScenario = __super::Columns[L"Scenario"];
        this->columnjones_Id = __super::Columns[L"jones_Id"];
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::InitClass() {
        this->columnresolution = (gcnew ::System::Data::DataColumn(L"resolution", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnresolution);
        this->columnmaxNumberOfPlayers = (gcnew ::System::Data::DataColumn(L"maxNumberOfPlayers", ::System::Int64::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnmaxNumberOfPlayers);
        this->columngraphicEngine = (gcnew ::System::Data::DataColumn(L"graphicEngine", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columngraphicEngine);
        this->columnScenario = (gcnew ::System::Data::DataColumn(L"Scenario", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnScenario);
        this->columnjones_Id = (gcnew ::System::Data::DataColumn(L"jones_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnjones_Id);
        this->columnresolution->AllowDBNull = false;
        this->columnmaxNumberOfPlayers->AllowDBNull = false;
        this->columngraphicEngine->AllowDBNull = false;
        this->columnScenario->AllowDBNull = false;
    }
    
    inline Jones::NewDataSet::configurationRow^  NewDataSet::configurationDataTable::NewconfigurationRow() {
        return (cli::safe_cast<Jones::NewDataSet::configurationRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::configurationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew Jones::NewDataSet::configurationRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::configurationDataTable::GetRowType() {
        return Jones::NewDataSet::configurationRow::typeid;
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->configurationRowChanged(this, (gcnew Jones::NewDataSet::configurationRowChangeEvent((cli::safe_cast<Jones::NewDataSet::configurationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->configurationRowChanging(this, (gcnew Jones::NewDataSet::configurationRowChangeEvent((cli::safe_cast<Jones::NewDataSet::configurationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->configurationRowDeleted(this, (gcnew Jones::NewDataSet::configurationRowChangeEvent((cli::safe_cast<Jones::NewDataSet::configurationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->configurationRowDeleting(this, (gcnew Jones::NewDataSet::configurationRowChangeEvent((cli::safe_cast<Jones::NewDataSet::configurationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::configurationDataTable::RemoveconfigurationRow(Jones::NewDataSet::configurationRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::configurationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        Jones::NewDataSet^  ds = (gcnew Jones::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"configurationDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::jonesRow::jonesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablejones = (cli::safe_cast<Jones::NewDataSet::jonesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::jonesRow::jones_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablejones->jones_IdColumn]));
    }
    inline System::Void NewDataSet::jonesRow::jones_Id::set(System::Int32 value) {
        this[this->tablejones->jones_IdColumn] = value;
    }
    
    inline cli::array< Jones::NewDataSet::configurationRow^  >^  NewDataSet::jonesRow::GetconfigurationRows() {
        if (this->Table->ChildRelations[L"jones_configuration"] == nullptr) {
            return gcnew cli::array< Jones::NewDataSet::configurationRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< Jones::NewDataSet::configurationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jones_configuration"])));
        }
    }
    
    
    inline NewDataSet::configurationRow::configurationRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableconfiguration = (cli::safe_cast<Jones::NewDataSet::configurationDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::configurationRow::resolution::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableconfiguration->resolutionColumn]));
    }
    inline System::Void NewDataSet::configurationRow::resolution::set(System::String^  value) {
        this[this->tableconfiguration->resolutionColumn] = value;
    }
    
    inline System::Int64 NewDataSet::configurationRow::maxNumberOfPlayers::get() {
        return (cli::safe_cast<::System::Int64 >(this[this->tableconfiguration->maxNumberOfPlayersColumn]));
    }
    inline System::Void NewDataSet::configurationRow::maxNumberOfPlayers::set(System::Int64 value) {
        this[this->tableconfiguration->maxNumberOfPlayersColumn] = value;
    }
    
    inline System::String^  NewDataSet::configurationRow::graphicEngine::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableconfiguration->graphicEngineColumn]));
    }
    inline System::Void NewDataSet::configurationRow::graphicEngine::set(System::String^  value) {
        this[this->tableconfiguration->graphicEngineColumn] = value;
    }
    
    inline System::Int64 NewDataSet::configurationRow::Scenario::get() {
        return (cli::safe_cast<::System::Int64 >(this[this->tableconfiguration->ScenarioColumn]));
    }
    inline System::Void NewDataSet::configurationRow::Scenario::set(System::Int64 value) {
        this[this->tableconfiguration->ScenarioColumn] = value;
    }
    
    inline System::Int32 NewDataSet::configurationRow::jones_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableconfiguration->jones_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jones_Id\' in table \'configuration\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::configurationRow::jones_Id::set(System::Int32 value) {
        this[this->tableconfiguration->jones_IdColumn] = value;
    }
    
    inline Jones::NewDataSet::jonesRow^  NewDataSet::configurationRow::jonesRow::get() {
        return (cli::safe_cast<Jones::NewDataSet::jonesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jones_configuration"])));
    }
    inline System::Void NewDataSet::configurationRow::jonesRow::set(Jones::NewDataSet::jonesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"jones_configuration"]);
    }
    
    inline ::System::Boolean NewDataSet::configurationRow::Isjones_IdNull() {
        return this->IsNull(this->tableconfiguration->jones_IdColumn);
    }
    
    inline ::System::Void NewDataSet::configurationRow::Setjones_IdNull() {
        this[this->tableconfiguration->jones_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::jonesRowChangeEvent::jonesRowChangeEvent(Jones::NewDataSet::jonesRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Jones::NewDataSet::jonesRow^  NewDataSet::jonesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::jonesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::configurationRowChangeEvent::configurationRowChangeEvent(Jones::NewDataSet::configurationRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline Jones::NewDataSet::configurationRow^  NewDataSet::configurationRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::configurationRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
